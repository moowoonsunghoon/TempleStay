{"version":3,"sources":["Header.js","Content1.js","Content2.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","ref","this","MyRef","style","backgroundColor","height","props","onWheel","WheelPage","onTouchStart","touchStartHandler","onTouchMove","touchMoveHandler","onTouchEnd","touchEndHandler","Component","Content1","Content2","Footer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","React","createRef","App","state","scroll","window","innerHeight","remotebtn","index","touchscroll","e","_this$state","complete","document","getElementsByClassName","concat","classList","scrollDown","setTimeout","add","remove","deltaY","setState","current","offsetTop","handleAction","i","scrollHeight","resize","preventDefault","myref","removeEventListener","onbeforeunload","scrollTo","addEventListener","children","length","push","prevProps","prevState","styles","body","_this2","remoteBtn","map","key","onClick","react","src_Header","touchstart","touchmove","touchEnd","src_Content1","src_Content2","src_Footer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b6df6fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"section0\" ref={this.MyRef} style={{backgroundColor: 'red', height: this.props.height}} onWheel={this.props.WheelPage} onTouchStart={this.props.touchStartHandler} onTouchMove={this.props.touchMoveHandler} onTouchEnd={this.props.touchEndHandler}>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Content1 extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"section1\" ref={this.MyRef} style={{backgroundColor: 'blue', height: this.props.height}} onWheel={this.props.WheelPage} onTouchStart={this.props.touchStartHandler} onTouchMove={this.props.touchMoveHandler}>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content1;\r\n","import React, { Component } from 'react';\r\n\r\nclass Content2 extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"section2\" ref={this.MyRef} style={{backgroundColor: 'black', height: this.props.height}} onWheel={this.props.WheelPage} onTouchStart={this.props.touchStartHandler} onTouchMove={this.props.touchMoveHandler}>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content2;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.MyRef = React.createRef()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"section3\" ref={this.MyRef} style={{backgroundColor: 'green', height: this.props.height}} onWheel={this.props.WheelPage} onTouchStart={this.props.touchStartHandler} onTouchMove={this.props.touchMoveHandler}>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport Content1 from \"./Content1\";\nimport Content2 from \"./Content2\";\nimport Footer from \"./Footer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.MyRef = React.createRef()\n    this.myref = React.createRef()\n  }\n\n  state = {\n    scroll: 0,\n    height: window.innerHeight,\n    remotebtn: [],\n    index: 0,\n    touchscroll: 0\n  }\n  \n  WheelPage = (e) => {\n    const {scroll, height} = this.state;\n    const complete = document.getElementsByClassName(`section${this.state.index}`)[0].classList;\n    const scrollDown = () => setTimeout(() => {\n        document.getElementsByClassName(`section${this.state.index }`)[0].classList.add('complete')\n        if (this.state.index === 0) {\n          return\n        }else {\n          document.getElementsByClassName(`section${this.state.index - 1}`)[0].classList.remove('complete')\n        }\n      }, 700);\n    const scrollUp = () => setTimeout(() => {\n      document.getElementsByClassName(`section${this.state.index }`)[0].classList.add('complete')\n      document.getElementsByClassName(`section${this.state.index + 1}`)[0].classList.remove('complete')\n    }, 700);\n    if (e.deltaY > 0 && scroll <= 0) {\n      this.setState({\n        scroll: height,\n        index: 1\n      })\n      scrollDown();\n    } else if(e.deltaY > 0 && scroll > 0 && complete[1] === 'complete'){\n      if (scroll === this.MyRef.current.MyRef.current.offsetTop) {\n        return\n      }else{\n        this.setState({\n          scroll: scroll + height,\n          index: this.state.index + 1\n        })\n        scrollDown();\n      }\n    } else if(e.deltaY < 0 && scroll > 0 && complete[1] === 'complete'){\n        this.setState({\n          scroll: scroll - height,\n          index: this.state.index - 1\n      })\n      scrollUp();\n    }\n  }\n\n  handleAction = (i) => {\n    const buttonClick = () => {setTimeout(() => {\n      document.getElementsByClassName(`section${this.state.index }`)[0].classList.add('complete')\n      }, 700);\n      document.getElementsByClassName(`complete`)[0].classList.remove('complete')\n    }\n    this.setState({\n      scroll: this.MyRef.current.MyRef.current.scrollHeight * i,\n      index: i\n    })\n    buttonClick()\n  }\n\n  resize = () => {\n    this.setState({\n      height: window.innerHeight\n    })\n  }\n\n  touchStartHandler = (e) => {\n    /* this.setState({\n      touchscroll: e.touches[0].pageY\n    }) */\n    e.preventDefault()\n  }\n\n  touchMoveHandler = (e) => {\n    /* const {scroll, height, touchscroll} = this.state;\n    const complete = document.getElementsByClassName(`section${this.state.index}`)[0].classList;\n    const scrollDown = () => setTimeout(() => {\n        document.getElementsByClassName(`section${this.state.index }`)[0].classList.add('complete')\n        if (this.state.index === 0) {\n          return\n        }else {\n          document.getElementsByClassName(`section${this.state.index - 1}`)[0].classList.remove('complete')\n        }\n      }, 700);\n    const scrollUp = () => setTimeout(() => {\n      document.getElementsByClassName(`section${this.state.index }`)[0].classList.add('complete')\n      document.getElementsByClassName(`section${this.state.index + 1}`)[0].classList.remove('complete')\n    }, 700);\n    if (e.touches[0].pageY < touchscroll && scroll <= 0) {\n      this.setState({\n        scroll: height,\n        index: 1\n      })\n      scrollDown();\n    } else if(e.touches[0].pageY  < touchscroll && scroll > 0 && complete[1] === 'complete'){\n      if (scroll === this.MyRef.current.MyRef.current.offsetTop) {\n        return\n      }else{\n        this.setState({\n          scroll: scroll + height,\n          index: this.state.index + 1\n        })\n        scrollDown();\n      }\n    } else if(e.touches[0].pageY > touchscroll && scroll > 0 && complete[1] === 'complete'){\n        this.setState({\n          scroll: scroll - height,\n          index: this.state.index - 1\n      })\n      scrollUp();\n    } */\n    e.preventDefault()\n  }\n\n  touchEndHandler = (e) => {\n    e.preventDefault()\n  }\n\n  componentDidMount() {\n    window.removeEventListener(\"scroll\", (e) => { e.preventDefault()});\n    window.onbeforeunload = () => {\n      window.scrollTo(0,0);\n    };\n    document.addEventListener('touchstart', this.touchStartHandler);\n    document.addEventListener('touchmove', this.touchMoveHandler);\n    document.addEventListener('touchend', this.touchEndHandler);\n    document.addEventListener(\"resize\", this.resize);\n    let remotebtn = [];\n    for (let i = 0; i < this.myref.current.children.length; i++) {\n      remotebtn.push(i)\n    } \n    this.setState({\n      remotebtn: remotebtn\n    })\n    document.getElementsByClassName('section0')[0].classList.add('complete')\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    //그냥방식\n    /*  window.scrollTo({\n        top: this.state.scroll,\n        behavior: 'smooth'\n      })\n    */\n      //fullpage 방식\n      const styles = `height: 100%;\n      position: relative;\n      touch-action: none;\n      transform: translate3d(0px, ${this.state.scroll * -1 + 'px'}, 0px);\n      transition: all 700ms ease 0s;`\n      document.body.getElementsByClassName('App')[0].style = styles\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize);\n    document.removeEventListener('touchstart', this.touchStartHandler);\n    document.removeEventListener('touchmove', this.touchMoveHandler);\n    document.removeEventListener('touchend', this.touchEndHandler);\n  }\n\n  render() {\n    const remoteBtn = this.state.remotebtn.map(i => {\n      const btn = <li key={i}><span className={this.state.index === i ? \"remotebtn active\" : 'remotebtn'} onClick={() => this.handleAction(i)}></span></li>\n      return btn\n    })\n    return (\n      <Fragment>\n        <div ref={this.myref} className=\"App\">\n          <Header WheelPage={this.WheelPage} touchstart={this.touchStartHandler} touchmove={this.touchMoveHandler} height={this.state.height} touchEnd={this.touchEndHandler}/>\n          <Content1 WheelPage={this.WheelPage} touchstart={this.touchStartHandler} touchmove={this.touchMoveHandler} height={this.state.height} />\n          <Content2 WheelPage={this.WheelPage} touchstart={this.touchStartHandler} touchmove={this.touchMoveHandler} height={this.state.height} />\n          <Footer WheelPage={this.WheelPage} touchstart={this.touchStartHandler} touchmove={this.touchMoveHandler} height={this.state.height} ref={this.MyRef} />\n        </div>\n        <div className=\"remote\">\n        <ul>\n          {remoteBtn ? remoteBtn : null}\n        </ul>\n      </div>\n    </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}